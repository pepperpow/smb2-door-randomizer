
# TODO: this is fairly specific solutions to a problem
# consider: just editing levels and making seperate level folder EXCLUDING bad levels
# patches turn one-way paths into two-way
level_patches = {
    (0,0): [tl.smb2command(0, 2, 3, 4, 'LINEAR', ''.join([chr(TileName.JumpThroughBlock)]*2), 0, 999),
        tl.smb2command(0, 2, 11, 12, 'LINEAR', ''.join([chr(TileName.JumpThroughBlock)]*2), 0, 999),
        tl.smb2command(0, 3, 13, 3, 'LINEAR', ''.join([chr(TileName.JumpThroughBlock)]*2), 0, 999)],
    (0,5): [tl.smb2command(0, 3, 0, 4, 'VLINEAR', ''.join([chr(TileName.MushroomBlock)]*2), 0, 999)],
    (1,1): [tl.smb2command(0, 2, 8, 12, 'LINEAR', ''.join([chr(TileName.GrassBomb)]*2), 0, 999)],
    (4,2): [tl.smb2command(0, 1, 13, 6, 'REPEAT', ''.join([chr(TileName.JumpThroughSandBlock)]*3), 0, 999),
            tl.smb2command(0, 1, 13, 7, 'REPEAT', ''.join([chr(TileName.JumpThroughSandBlock)]*3), 0, 999), ],
    # (5,3): [tl.smb2command(0, 0, 14, 9, 'VREPEAT', ''.join([chr(TileName.JumpThroughSandBlock)]*30), 0, 999),
    #         tl.smb2command(0, 2, 14, 0, 'VREPEAT', ''.join([chr(TileName.JumpThroughSandBlock)]*37), 0, 999), ],
    (6,4): [tl.smb2command(0, 3, 3, 5, 'LINEAR', ''.join([chr(TileName.GrassBomb)]*2), 0, 999)],
    (7,0): [tl.smb2command(0, 1, 3, 5, 'VLINEAR', ''.join([chr(TileName.Ladder)]*5), 0, 999),
            tl.smb2command(0, 1, 3, 7, 'VLINEAR', ''.join([chr(TileName.LadderStandable)]), 0, 999),
            tl.smb2command(0, 2, 2, 5, 'VLINEAR', ''.join([chr(TileName.Ladder)]*5), 0, 999),
            tl.smb2command(0, 2, 2, 7, 'VLINEAR', ''.join([chr(TileName.LadderStandable)]), 0, 999),
            tl.smb2command(0, 4, 2, 5, 'VLINEAR', ''.join([chr(TileName.Ladder)]*5), 0, 999),
            tl.smb2command(0, 4, 2, 7, 'VLINEAR', ''.join([chr(TileName.LadderStandable)]), 0, 999),
    ],
    (7,1): [tl.smb2command(0, 5, 10, 12, 'LINEAR', ''.join([chr(TileName.GrassBomb)]*2), 0, 999),
            tl.smb2command(0, 1, 15, 9, 'LINEAR', ''.join([chr(TileName.GrassBomb)]*2), 0, 999),
            tl.smb2command(0, 3, 5, 13, 'LINEAR', ''.join([chr(TileName.JumpThroughBlock)]*3), 0, 999),
            tl.smb2command(0, 4, 14, 8, 'LINEAR', ''.join([chr(TileName.Sky)]*4), 0, 999),
            tl.smb2command(0, 4, 14, 9, 'LINEAR', ''.join([chr(TileName.Sky)]*4), 0, 999),
    ],
    (8,3):[tl.smb2command(0, 4, 14, 10, 'VLINEAR', ''.join([chr(TileName.MushroomBlock)]*4), 0, 999)],
    (11,1): [tl.smb2command(0, 5, 11, 6, 'LINEAR', ''.join([chr(TileName.JumpThroughBlock)]*5), 0, 999)],
    (11,3): [tl.smb2command(0, 1, 2, 0, 'VREPEAT', ''.join([chr(TileName.Ladder)]*30), 0, 998),
            tl.smb2command(0, 2, 2, 0, 'VREPEAT', ''.join([chr(TileName.Ladder)]*30), 0, 998),
            tl.smb2command(0, 0, 1, 12, 'VREPEAT', ''.join([chr(TileName.JumpThroughBlock)]*2), 0, 999),
            tl.smb2command(0, 1, 2, 3, 'SINGLE', ''.join([chr(TileName.LadderStandable)]), 0, 999),
            ],
    (12,1): [tl.smb2command(0, 7, 6, 13, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]*3), 0, 999),
            tl.smb2command(0, 7, 14, 13, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]*3), 0, 999),
            tl.smb2command(0, 7, 6, 9, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]*1), 0, 999), ],
    (13,3): [tl.smb2command(0, 0, 14, 6, 'VREPEAT', ''.join([chr(TileName.JumpThroughBlock)]*30), 0, 998),
            tl.smb2command(0, 2, 14, 0, 'VREPEAT', ''.join([chr(TileName.JumpThroughBlock)]*31), 0, 998),
            tl.smb2command(0, 4, 14, 0, 'VREPEAT', ''.join([chr(TileName.JumpThroughBlock)]*15), 0, 998),
            tl.smb2command(0, 5, 14, 0, 'VREPEAT', ''.join([chr(TileName.JumpThroughBlock)]*18), 0, 998),
            tl.smb2command(0, 0, 14, 4, 'VREPEAT', ''.join([chr(TileName.Sky)]*2), 0, 998),
            tl.smb2command(0, 0, 13, 6, 'VREPEAT', ''.join([chr(TileName.RockWall)]*13), 0, 998),
            ],
    (17,4): [tl.smb2command(0, 3, 5, 7, 'LINEAR', ''.join([chr(TileName.JumpThroughSandBlock)]*2), 0, 999)],
    (18,1): [tl.smb2command(0, 0, 3, 6, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]), 0, 999),
            tl.smb2command(0, 1, 3, 11, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]*3), 0, 999),
            tl.smb2command(0, 1, 5, 7, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]), 0, 999), 
            tl.smb2command(0, 2, 6, 9, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]), 0, 999),
            tl.smb2command(0, 2, 6, 5, 'REPEAT', ''.join([chr(TileName.JumpThroughBlock)]), 0, 999),],
    (18,3): [
            tl.smb2command(0, 2, 12, 0, 'LINEAR', ''.join([chr(TileName.CloudRight), chr(TileName.Sky), chr(TileName.CloudLeft)]), 0, 999),
            tl.smb2command(0, 2, 12, 10, 'LINEAR', ''.join([chr(TileName.CloudRight), chr(TileName.Sky), chr(TileName.CloudLeft)]), 0, 999),
            tl.smb2command(0, 3, 1, 4, 'LINEAR', ''.join([chr(TileName.CloudRight), chr(TileName.Sky), chr(TileName.CloudLeft)]), 0, 999),
            tl.smb2command(0, 3, 12, 7, 'LINEAR', ''.join([chr(TileName.CloudRight), chr(TileName.Sky), chr(TileName.CloudLeft)]), 0, 999),],
    (19,2): [
            tl.smb2command(0, 0, 15, 11, 'VREPEAT', ''.join([chr(TileName.Sky)]*2), 0, 999),
            tl.smb2command(0, 2, 8, 11, 'REPEAT', ''.join([chr(TileName.Sky)]*25), 0, 999),
            tl.smb2command(0, 2, 8, 12, 'REPEAT', ''.join([chr(TileName.Sky)]*25), 0, 999),
            tl.smb2command(0, 4, 9, 11, 'REPEAT', ''.join([chr(TileName.Sky)]*30), 0, 999),
            tl.smb2command(0, 4, 9, 12, 'REPEAT', ''.join([chr(TileName.Sky)]*30), 0, 999),
            tl.smb2command(0, 6, 14, 7, 'REPEAT', ''.join([chr(TileName.Sky)]*7), 0, 999),
            tl.smb2command(0, 6, 14, 8, 'REPEAT', ''.join([chr(TileName.Sky)]*7), 0, 999),
            tl.smb2command(0, 8, 3, 7, 'REPEAT', ''.join([chr(TileName.Cherry)]*3), 0, 999),
            tl.smb2command(0, 8, 3, 8, 'REPEAT', ''.join([chr(TileName.Sky)]*3), 0, 999),
            ],
    (19,4): [
            tl.smb2command(0, 4, 8, 11, 'REPEAT', ''.join([chr(TileName.Sky)]*2), 0, 999),
            tl.smb2command(0, 4, 8, 12, 'REPEAT', ''.join([chr(TileName.Sky)]*2), 0, 999),
            tl.smb2command(0, 4, 14, 11, 'REPEAT', ''.join([chr(TileName.Cherry)]*30), 0, 999),
            tl.smb2command(0, 4, 14, 12, 'REPEAT', ''.join([chr(TileName.Cherry)]*30), 0, 999),
            tl.smb2command(0, 5, 8, 11, 'REPEAT', ''.join([chr(TileName.Cherry)]*26), 0, 999),
            tl.smb2command(0, 5, 8, 12, 'REPEAT', ''.join([chr(TileName.Cherry)]*26), 0, 999),
            ],
    (19,6): [#10 11 4 6 12 6
            tl.smb2command(0, 3, 8, 7, 'VREPEAT', ''.join([chr(TileName.JumpThroughBlock)]), 0, 999),
            tl.smb2command(0, 3, 8, 8, 'VREPEAT', ''.join([chr(TileName.Ladder)]*31), 0, 999),
            tl.smb2command(0, 4, 8, 8, 'VREPEAT', ''.join([chr(TileName.Ladder)]*31), 0, 999),
            tl.smb2command(0, 5, 8, 8, 'VREPEAT', ''.join([chr(TileName.Ladder)]*31), 0, 999),
            tl.smb2command(0, 6, 8, 8, 'VREPEAT', ''.join([chr(TileName.Ladder)]*31), 0, 999),
            ]
}

enemy_patches = {
    (1,0): [(EnemyName.Pidgit, 1, 6, 3)],
    (5,3): [(EnemyName.FlyingCarpet, 9, 8, 3)],
    (6,1): [(EnemyName.FlyingCarpet, 6, 5, 9)],
    (11,3): [(EnemyName.FlyingCarpet, 6, 11, 3)],
    (13,3): [(EnemyName.FlyingCarpet, 6, 5, 6)],
    (11,1): [(EnemyName.Birdo, 10, 4, 5)],
}